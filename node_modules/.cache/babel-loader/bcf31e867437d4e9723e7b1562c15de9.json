{"ast":null,"code":"// core keys merging algorithm. If previous render's keys are [a, b], and the\n// next render's [c, b, d], what's the final merged keys and ordering?\n// - c and a must both be before b\n// - b before d\n// - ordering between a and c ambiguous\n// this reduces to merging two partially ordered lists (e.g. lists where not\n// every item has a definite ordering, like comparing a and c above). For the\n// ambiguous ordering we deterministically choose to place the next render's\n// item after the previous'; so c after a\n// this is called a topological sorting. Except the existing algorithms don't\n// work well with js bc of the amount of allocation, and isn't optimized for our\n// current use-case bc the runtime is linear in terms of edges (see wiki for\n// meaning), which is huge when two lists have many common elements\nexport default function mergeDiff(prev, next, onRemove) {\n  // bookkeeping for easier access of a key's index below. This is 2 allocations +\n  // potentially triggering chrome hash map mode for objs (so it might be faster\n  // to loop through and find a key's index each time), but I no longer care\n  let prevKeyIndex = {};\n\n  for (let i = 0; i < prev.length; i++) {\n    prevKeyIndex[prev[i].key] = i;\n  }\n\n  let nextKeyIndex = {};\n\n  for (let i = 0; i < next.length; i++) {\n    nextKeyIndex[next[i].key] = i;\n  } // first, an overly elaborate way of merging prev and next, eliminating\n  // duplicates (in terms of keys). If there's dupe, keep the item in next).\n  // This way of writing it saves allocations\n\n\n  let ret = [];\n\n  for (let i = 0; i < next.length; i++) {\n    ret[i] = next[i];\n  }\n\n  for (let i = 0; i < prev.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {\n      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't\n      // merge in keys that the user desires to kill\n      const fill = onRemove(i, prev[i]);\n\n      if (fill != null) {\n        ret.push(fill);\n      }\n    }\n  } // now all the items all present. Core sorting logic to have the right order\n\n\n  return ret.sort((a, b) => {\n    const nextOrderA = nextKeyIndex[a.key];\n    const nextOrderB = nextKeyIndex[b.key];\n    const prevOrderA = prevKeyIndex[a.key];\n    const prevOrderB = prevKeyIndex[b.key];\n\n    if (nextOrderA != null && nextOrderB != null) {\n      // both keys in next\n      return nextKeyIndex[a.key] - nextKeyIndex[b.key];\n    } else if (prevOrderA != null && prevOrderB != null) {\n      // both keys in prev\n      return prevKeyIndex[a.key] - prevKeyIndex[b.key];\n    } else if (nextOrderA != null) {\n      // key a in next, key b in prev\n      // how to determine the order between a and b? We find a \"pivot\" (term\n      // abuse), a key present in both prev and next, that is sandwiched between\n      // a and b. In the context of our above example, if we're comparing a and\n      // d, b's (the only) pivot\n      for (let i = 0; i < next.length; i++) {\n        const pivot = next[i].key;\n\n        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n          continue;\n        }\n\n        if (nextOrderA < nextKeyIndex[pivot] && prevOrderB > prevKeyIndex[pivot]) {\n          return -1;\n        } else if (nextOrderA > nextKeyIndex[pivot] && prevOrderB < prevKeyIndex[pivot]) {\n          return 1;\n        }\n      } // pluggable. default to: next bigger than prev\n\n\n      return 1;\n    } // prevOrderA, nextOrderB\n\n\n    for (let i = 0; i < next.length; i++) {\n      const pivot = next[i].key;\n\n      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n        continue;\n      }\n\n      if (nextOrderB < nextKeyIndex[pivot] && prevOrderA > prevKeyIndex[pivot]) {\n        return 1;\n      } else if (nextOrderB > nextKeyIndex[pivot] && prevOrderA < prevKeyIndex[pivot]) {\n        return -1;\n      }\n    } // pluggable. default to: next bigger than prev\n\n\n    return -1;\n  });\n}","map":{"version":3,"sources":["/Users/leshlyerivera/Documents/GitHub/portfolio/src/components/gallery/src/mergeDiff.js"],"names":["mergeDiff","prev","next","onRemove","prevKeyIndex","i","length","key","nextKeyIndex","ret","Object","prototype","hasOwnProperty","call","fill","push","sort","a","b","nextOrderA","nextOrderB","prevOrderA","prevOrderB","pivot"],"mappings":"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","sourcesContent":["/* @flow */\nimport type { TransitionStyle } from './Types';\n\n// core keys merging algorithm. If previous render's keys are [a, b], and the\n// next render's [c, b, d], what's the final merged keys and ordering?\n\n// - c and a must both be before b\n// - b before d\n// - ordering between a and c ambiguous\n\n// this reduces to merging two partially ordered lists (e.g. lists where not\n// every item has a definite ordering, like comparing a and c above). For the\n// ambiguous ordering we deterministically choose to place the next render's\n// item after the previous'; so c after a\n\n// this is called a topological sorting. Except the existing algorithms don't\n// work well with js bc of the amount of allocation, and isn't optimized for our\n// current use-case bc the runtime is linear in terms of edges (see wiki for\n// meaning), which is huge when two lists have many common elements\nexport default function mergeDiff(\n  prev: Array<TransitionStyle>,\n  next: Array<TransitionStyle>,\n  onRemove: (\n    prevIndex: number,\n    prevStyleCell: TransitionStyle,\n  ) => ?TransitionStyle,\n): Array<TransitionStyle> {\n  // bookkeeping for easier access of a key's index below. This is 2 allocations +\n  // potentially triggering chrome hash map mode for objs (so it might be faster\n  // to loop through and find a key's index each time), but I no longer care\n  let prevKeyIndex: { [key: string]: number } = {};\n  for (let i = 0; i < prev.length; i++) {\n    prevKeyIndex[prev[i].key] = i;\n  }\n  let nextKeyIndex: { [key: string]: number } = {};\n  for (let i = 0; i < next.length; i++) {\n    nextKeyIndex[next[i].key] = i;\n  }\n\n  // first, an overly elaborate way of merging prev and next, eliminating\n  // duplicates (in terms of keys). If there's dupe, keep the item in next).\n  // This way of writing it saves allocations\n  let ret = [];\n  for (let i = 0; i < next.length; i++) {\n    ret[i] = next[i];\n  }\n  for (let i = 0; i < prev.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(nextKeyIndex, prev[i].key)) {\n      // this is called my TM's `mergeAndSync`, which calls willLeave. We don't\n      // merge in keys that the user desires to kill\n      const fill = onRemove(i, prev[i]);\n      if (fill != null) {\n        ret.push(fill);\n      }\n    }\n  }\n\n  // now all the items all present. Core sorting logic to have the right order\n  return ret.sort((a, b) => {\n    const nextOrderA = nextKeyIndex[a.key];\n    const nextOrderB = nextKeyIndex[b.key];\n    const prevOrderA = prevKeyIndex[a.key];\n    const prevOrderB = prevKeyIndex[b.key];\n\n    if (nextOrderA != null && nextOrderB != null) {\n      // both keys in next\n      return nextKeyIndex[a.key] - nextKeyIndex[b.key];\n    } else if (prevOrderA != null && prevOrderB != null) {\n      // both keys in prev\n      return prevKeyIndex[a.key] - prevKeyIndex[b.key];\n    } else if (nextOrderA != null) {\n      // key a in next, key b in prev\n\n      // how to determine the order between a and b? We find a \"pivot\" (term\n      // abuse), a key present in both prev and next, that is sandwiched between\n      // a and b. In the context of our above example, if we're comparing a and\n      // d, b's (the only) pivot\n      for (let i = 0; i < next.length; i++) {\n        const pivot = next[i].key;\n        if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n          continue;\n        }\n\n        if (\n          nextOrderA < nextKeyIndex[pivot] &&\n          prevOrderB > prevKeyIndex[pivot]\n        ) {\n          return -1;\n        } else if (\n          nextOrderA > nextKeyIndex[pivot] &&\n          prevOrderB < prevKeyIndex[pivot]\n        ) {\n          return 1;\n        }\n      }\n      // pluggable. default to: next bigger than prev\n      return 1;\n    }\n    // prevOrderA, nextOrderB\n    for (let i = 0; i < next.length; i++) {\n      const pivot = next[i].key;\n      if (!Object.prototype.hasOwnProperty.call(prevKeyIndex, pivot)) {\n        continue;\n      }\n      if (\n        nextOrderB < nextKeyIndex[pivot] &&\n        prevOrderA > prevKeyIndex[pivot]\n      ) {\n        return 1;\n      } else if (\n        nextOrderB > nextKeyIndex[pivot] &&\n        prevOrderA < prevKeyIndex[pivot]\n      ) {\n        return -1;\n      }\n    }\n    // pluggable. default to: next bigger than prev\n    return -1;\n  });\n}\n"]},"metadata":{},"sourceType":"module"}